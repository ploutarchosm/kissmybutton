c5259eedd16709fe78dc6e325de11ec9
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var platform_browser_dynamic_exports = {};
__export(platform_browser_dynamic_exports, {
  JitCompilerFactory: () => JitCompilerFactory,
  RESOURCE_CACHE_PROVIDER: () => RESOURCE_CACHE_PROVIDER,
  VERSION: () => VERSION,
  platformBrowserDynamic: () => platformBrowserDynamic,
  \u0275INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: () => INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,
  \u0275platformCoreDynamic: () => platformCoreDynamic
});
module.exports = __toCommonJS(platform_browser_dynamic_exports);
var import_compiler = require("@angular/compiler");
var i0 = __toESM(require("@angular/core"), 1);
var import_core = require("@angular/core");
var import_common = require("@angular/common");
var import_platform_browser = require("@angular/platform-browser");
/**
 * @license Angular v14.3.0
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const ERROR_COLLECTOR_TOKEN = new import_core.InjectionToken("ErrorCollector");
const DEFAULT_PACKAGE_URL_PROVIDER = {
  provide: import_core.PACKAGE_ROOT_URL,
  useValue: "/"
};
const COMPILER_PROVIDERS = [{ provide: import_core.Compiler, useFactory: () => new import_core.Compiler() }];
class JitCompilerFactory {
  constructor(defaultOptions) {
    const compilerOptions = {
      useJit: true,
      defaultEncapsulation: import_core.ViewEncapsulation.Emulated,
      missingTranslation: import_core.MissingTranslationStrategy.Warning
    };
    this._defaultOptions = [compilerOptions, ...defaultOptions];
  }
  createCompiler(options = []) {
    const opts = _mergeOptions(this._defaultOptions.concat(options));
    const injector = import_core.Injector.create([
      COMPILER_PROVIDERS,
      {
        provide: import_compiler.CompilerConfig,
        useFactory: () => {
          return new import_compiler.CompilerConfig({
            useJit: opts.useJit,
            jitDevMode: (0, import_core.isDevMode)(),
            defaultEncapsulation: opts.defaultEncapsulation,
            missingTranslation: opts.missingTranslation,
            preserveWhitespaces: opts.preserveWhitespaces
          });
        },
        deps: []
      },
      opts.providers
    ]);
    return injector.get(import_core.Compiler);
  }
}
function _mergeOptions(optionsArr) {
  return {
    useJit: _lastDefined(optionsArr.map((options) => options.useJit)),
    defaultEncapsulation: _lastDefined(optionsArr.map((options) => options.defaultEncapsulation)),
    providers: _mergeArrays(optionsArr.map((options) => options.providers)),
    missingTranslation: _lastDefined(optionsArr.map((options) => options.missingTranslation)),
    preserveWhitespaces: _lastDefined(optionsArr.map((options) => options.preserveWhitespaces))
  };
}
function _lastDefined(args) {
  for (let i = args.length - 1; i >= 0; i--) {
    if (args[i] !== void 0) {
      return args[i];
    }
  }
  return void 0;
}
function _mergeArrays(parts) {
  const result = [];
  parts.forEach((part) => part && result.push(...part));
  return result;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const platformCoreDynamic = (0, import_core.createPlatformFactory)(import_core.platformCore, "coreDynamic", [
  { provide: import_core.COMPILER_OPTIONS, useValue: {}, multi: true },
  { provide: import_core.CompilerFactory, useClass: JitCompilerFactory, deps: [import_core.COMPILER_OPTIONS] }
]);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
class ResourceLoaderImpl extends import_compiler.ResourceLoader {
  get(url) {
    let resolve;
    let reject;
    const promise = new Promise((res, rej) => {
      resolve = res;
      reject = rej;
    });
    const xhr = new XMLHttpRequest();
    xhr.open("GET", url, true);
    xhr.responseType = "text";
    xhr.onload = function() {
      const response = xhr.response || xhr.responseText;
      let status = xhr.status === 1223 ? 204 : xhr.status;
      if (status === 0) {
        status = response ? 200 : 0;
      }
      if (200 <= status && status <= 300) {
        resolve(response);
      } else {
        reject(`Failed to load ${url}`);
      }
    };
    xhr.onerror = function() {
      reject(`Failed to load ${url}`);
    };
    xhr.send();
    return promise;
  }
}
ResourceLoaderImpl.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ResourceLoaderImpl, deps: null, target: i0.\u0275\u0275FactoryTarget.Injectable });
ResourceLoaderImpl.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ResourceLoaderImpl });
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ResourceLoaderImpl, decorators: [{
  type: import_core.Injectable
}] });
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [
  import_platform_browser.\u0275INTERNAL_BROWSER_PLATFORM_PROVIDERS,
  {
    provide: import_core.COMPILER_OPTIONS,
    useValue: { providers: [{ provide: import_compiler.ResourceLoader, useClass: ResourceLoaderImpl, deps: [] }] },
    multi: true
  },
  { provide: import_core.PLATFORM_ID, useValue: import_common.\u0275PLATFORM_BROWSER_ID }
];
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
class CachedResourceLoader extends import_compiler.ResourceLoader {
  constructor() {
    super();
    this._cache = import_core.\u0275global.$templateCache;
    if (this._cache == null) {
      throw new Error("CachedResourceLoader: Template cache was not found in $templateCache.");
    }
  }
  get(url) {
    if (this._cache.hasOwnProperty(url)) {
      return Promise.resolve(this._cache[url]);
    } else {
      return Promise.reject("CachedResourceLoader: Did not find cached template for " + url);
    }
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const VERSION = new import_core.Version("14.3.0");
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const RESOURCE_CACHE_PROVIDER = [{ provide: import_compiler.ResourceLoader, useClass: CachedResourceLoader, deps: [] }];
const platformBrowserDynamic = (0, import_core.createPlatformFactory)(platformCoreDynamic, "browserDynamic", INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
