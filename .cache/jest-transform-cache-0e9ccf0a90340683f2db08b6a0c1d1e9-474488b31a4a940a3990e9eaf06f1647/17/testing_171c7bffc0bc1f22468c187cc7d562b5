5fd95f05afd0b29b70492036aa13e33e
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var testing_exports = {};
__export(testing_exports, {
  BrowserTestingModule: () => BrowserTestingModule,
  platformBrowserTesting: () => platformBrowserTesting
});
module.exports = __toCommonJS(testing_exports);
var i0 = __toESM(require("@angular/core"), 1);
var import_core = require("@angular/core");
var import_platform_browser = require("@angular/platform-browser");
var import_common = require("@angular/common");
/**
 * @license Angular v14.3.0
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
class BrowserDetection {
  constructor(ua) {
    this._overrideUa = ua;
  }
  get _ua() {
    if (typeof this._overrideUa === "string") {
      return this._overrideUa;
    }
    return (0, import_common.\u0275getDOM)() ? (0, import_common.\u0275getDOM)().getUserAgent() : "";
  }
  static setup() {
    return new BrowserDetection(null);
  }
  get isFirefox() {
    return this._ua.indexOf("Firefox") > -1;
  }
  get isAndroid() {
    return this._ua.indexOf("Mozilla/5.0") > -1 && this._ua.indexOf("Android") > -1 && this._ua.indexOf("AppleWebKit") > -1 && this._ua.indexOf("Chrome") == -1 && this._ua.indexOf("IEMobile") == -1;
  }
  get isEdge() {
    return this._ua.indexOf("Edge") > -1;
  }
  get isWebkit() {
    return this._ua.indexOf("AppleWebKit") > -1 && this._ua.indexOf("Edge") == -1 && this._ua.indexOf("IEMobile") == -1;
  }
  get isIOS7() {
    return (this._ua.indexOf("iPhone OS 7") > -1 || this._ua.indexOf("iPad OS 7") > -1) && this._ua.indexOf("IEMobile") == -1;
  }
  get isSlow() {
    return this.isAndroid || this.isIOS7;
  }
  get isChromeDesktop() {
    return this._ua.indexOf("Chrome") > -1 && this._ua.indexOf("Mobile Safari") == -1 && this._ua.indexOf("Edge") == -1;
  }
  get isOldChrome() {
    return this._ua.indexOf("Chrome") > -1 && this._ua.indexOf("Chrome/3") > -1 && this._ua.indexOf("Edge") == -1;
  }
  get supportsCustomElements() {
    return typeof import_core.\u0275global.customElements !== "undefined";
  }
  get supportsDeprecatedCustomCustomElementsV0() {
    return typeof document.registerElement !== "undefined";
  }
  get supportsRegExUnicodeFlag() {
    return RegExp.prototype.hasOwnProperty("unicode");
  }
  get supportsShadowDom() {
    const testEl = document.createElement("div");
    return typeof testEl.attachShadow !== "undefined";
  }
  get supportsDeprecatedShadowDomV0() {
    const testEl = document.createElement("div");
    return typeof testEl.createShadowRoot !== "undefined";
  }
  get supportsTemplateElement() {
    const testEl = document.createElement("template");
    return typeof testEl.content !== "undefined";
  }
}
const browserDetection = BrowserDetection.setup();
function dispatchEvent(element, eventType) {
  const evt = (0, import_common.\u0275getDOM)().getDefaultDocument().createEvent("Event");
  evt.initEvent(eventType, true, true);
  (0, import_common.\u0275getDOM)().dispatchEvent(element, evt);
  return evt;
}
function createMouseEvent(eventType) {
  const evt = (0, import_common.\u0275getDOM)().getDefaultDocument().createEvent("MouseEvent");
  evt.initEvent(eventType, true, true);
  return evt;
}
function el(html) {
  return getContent(createTemplate(html)).firstChild;
}
function normalizeCSS(css) {
  return css.replace(/\s+/g, " ").replace(/:\s/g, ":").replace(/'/g, '"').replace(/ }/g, "}").replace(/url\((\"|\s)(.+)(\"|\s)\)(\s*)/g, (...match) => `url("${match[2]}")`).replace(/\[(.+)=([^"\]]+)\]/g, (...match) => `[${match[1]}="${match[2]}"]`);
}
function getAttributeMap(element) {
  const res = /* @__PURE__ */ new Map();
  const elAttrs = element.attributes;
  for (let i = 0; i < elAttrs.length; i++) {
    const attrib = elAttrs.item(i);
    res.set(attrib.name, attrib.value);
  }
  return res;
}
const _selfClosingTags = ["br", "hr", "input"];
function stringifyElement(el2) {
  let result = "";
  if ((0, import_common.\u0275getDOM)().isElementNode(el2)) {
    const tagName = el2.tagName.toLowerCase();
    result += `<${tagName}`;
    const attributeMap = getAttributeMap(el2);
    const sortedKeys = Array.from(attributeMap.keys()).sort();
    for (const key of sortedKeys) {
      const lowerCaseKey = key.toLowerCase();
      let attValue = attributeMap.get(key);
      if (typeof attValue !== "string") {
        result += ` ${lowerCaseKey}`;
      } else {
        if (lowerCaseKey === "style") {
          attValue = attValue.split(/; ?/).filter((s) => !!s).sort().map((s) => `${s};`).join(" ");
        }
        result += ` ${lowerCaseKey}="${attValue}"`;
      }
    }
    result += ">";
    const childrenRoot = templateAwareRoot(el2);
    const children = childrenRoot ? childrenRoot.childNodes : [];
    for (let j = 0; j < children.length; j++) {
      result += stringifyElement(children[j]);
    }
    if (_selfClosingTags.indexOf(tagName) == -1) {
      result += `</${tagName}>`;
    }
  } else if (isCommentNode(el2)) {
    result += `<!--${el2.nodeValue}-->`;
  } else {
    result += el2.textContent;
  }
  return result;
}
function createNgZone() {
  return new import_core.NgZone({ enableLongStackTrace: true, shouldCoalesceEventChangeDetection: false });
}
function isCommentNode(node) {
  return node.nodeType === Node.COMMENT_NODE;
}
function isTextNode(node) {
  return node.nodeType === Node.TEXT_NODE;
}
function getContent(node) {
  if ("content" in node) {
    return node.content;
  } else {
    return node;
  }
}
function templateAwareRoot(el2) {
  return (0, import_common.\u0275getDOM)().isElementNode(el2) && el2.nodeName === "TEMPLATE" ? getContent(el2) : el2;
}
function setCookie(name, value) {
  document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value);
}
function supportsWebAnimation() {
  return typeof Element.prototype["animate"] === "function";
}
function hasStyle(element, styleName, styleValue) {
  const value = element.style[styleName] || "";
  return styleValue ? value == styleValue : value.length > 0;
}
function hasClass(element, className) {
  return element.classList.contains(className);
}
function sortedClassList(element) {
  return Array.prototype.slice.call(element.classList, 0).sort();
}
function createTemplate(html) {
  const t = (0, import_common.\u0275getDOM)().getDefaultDocument().createElement("template");
  t.innerHTML = html;
  return t;
}
function childNodesAsList(el2) {
  const childNodes = el2.childNodes;
  const res = [];
  for (let i = 0; i < childNodes.length; i++) {
    res[i] = childNodes[i];
  }
  return res;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function initBrowserTests() {
  import_platform_browser.\u0275BrowserDomAdapter.makeCurrent();
  BrowserDetection.setup();
}
const _TEST_BROWSER_PLATFORM_PROVIDERS = [{ provide: import_core.PLATFORM_INITIALIZER, useValue: initBrowserTests, multi: true }];
const platformBrowserTesting = (0, import_core.createPlatformFactory)(import_core.platformCore, "browserTesting", _TEST_BROWSER_PLATFORM_PROVIDERS);
class BrowserTestingModule {
}
BrowserTestingModule.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: BrowserTestingModule, deps: [], target: i0.\u0275\u0275FactoryTarget.NgModule });
BrowserTestingModule.\u0275mod = i0.\u0275\u0275ngDeclareNgModule({ minVersion: "14.0.0", version: "14.3.0", ngImport: i0, type: BrowserTestingModule, exports: [import_platform_browser.BrowserModule] });
BrowserTestingModule.\u0275inj = i0.\u0275\u0275ngDeclareInjector({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: BrowserTestingModule, providers: [
  { provide: import_core.APP_ID, useValue: "a" },
  { provide: import_core.NgZone, useFactory: createNgZone }
], imports: [import_platform_browser.BrowserModule] });
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: BrowserTestingModule, decorators: [{
  type: import_core.NgModule,
  args: [{
    exports: [import_platform_browser.BrowserModule],
    providers: [
      { provide: import_core.APP_ID, useValue: "a" },
      { provide: import_core.NgZone, useFactory: createNgZone }
    ]
  }]
}] });
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
